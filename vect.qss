/* -*- c-basic-offset: 4 indent-tabs-mode: nil -*-  vi:set ts=8 sts=4 sw=4: */

/*
    Vect
    An experimental audio player for plural recordings of a work
    Centre for Digital Music, Queen Mary, University of London.

    This file is based on the Thorn theme of the Rosegarden MIDI and
    audio sequencer and notation editor.  Copyright 2006-2014
    D. Michael McIntyre and the Rosegarden team.
    
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License as
    published by the Free Software Foundation; either version 2 of the
    License, or (at your option) any later version.  See the file
    COPYING included with this distribution for more information.
*/

QWidget
{
    background: #333333;
    color: #FAFAFA; /* undocumented, but it works, and it's necessary */
}

QDialog
{
    background-color: #333333;
}


/* QToolBar

Supports the box model.  The :top, :left, :right, :bottom pseudo states
depending on the area in which the tool bar is grouped.  The :first, :last,
:middle, :only-one pseudo states indicator the position of the tool bar within a
line group (See QStyleOptionToolBar::positionWithinLine).  The separator of a
QToolBar is styled using the ::separator subcontrol.  The handle (to move the
toolbar) is styled using the ::handle subcontrol. */

/* Toolbars use gradient backgrounds that must be light enough to allow contrast
 * with black icons.  Top/bottom and left/right require different gradients to
 * get the proper look.
 */
QToolBar:top,
QToolBar:bottom
{
    background-color: #333333;
}

QToolBar:left,
QToolBar:right 
{
    background-color: #333333;
}

/* Toolbars must be light enough for black icons, therefore black text on their
 * QLabels, rather than white, is more appropriate.
 */
QToolBar:top QLabel,
QToolBar:bottom QLabel 
{
    background-color: transparent;
    color: #000000;
}

QToolBar::handle:top,
QToolBar::handle:bottom
{
    image: url(:icons/style/htoolbar-separator.png);
}

QToolBar::handle:left,
QToolBar::handle:right
{
    image: url(:icons/style/vtoolbar-separator.png);
}

QFrame#BottomFrame,
QFrame#BottomFrame > QFrame
{
    background-color: #333333;
}

/*  QLabel
 
Supports the box model. Does not support the :hover pseudo-state.  Since 4.3,
setting a stylesheet on a QLabel automatically sets the QFrame::frameStyle
property to QFrame::StyledPanel. */

QLabel
{
    background: transparent;
    color: white;
}

/*  QMenu
  
Supports the box model.  Individual items are styled using the ::item
subcontrol. In addition to the usually supported pseudo states, item subcontrol
supports the :selected, :default, :exclusive and the non-exclusive pseudo
states.  The indicator of checkable menu items is styled using the ::indicator
subcontrol.  The separator is styled using the ::separator subcontrol.  For
items with a sub menu, the arrow marks are styled using the right-arrow and
left-arrow.  The scroller is styled using the ::scroller.  The tear-off is
styled using the ::tear-off. */

QMenu
{
    background-color: #EEEEEE;
    border: 1px solid black;
}

QMenu::separator
{
    height: 2px;
    background: #AAAAAA;
    margin-left: 10px;
    margin-right: 5px;
}

QMenu::item:enabled
{
    /* sets background of menu item. set this to something non-transparent
    if you want menu color and menu item color to be different */
    background-color: transparent;
    color: #000000;
    padding: 2px 25px 2px 20px;
    border: 1px solid transparent;
    min-width: 12em; /* leaves room for space between item and hotkey */
}

QMenu::item:!enabled
{
    color: #AAAAAA;
    padding: 2px 25px 2px 20px;
    border: 1px solid transparent;
    min-width: 12em; /* leaves room for space between item and hotkey */
}

/* Menu selection background color
 */
QMenu::item:selected
{
    background-color: #80AFFF;
    color: #FFFFFF;
}

/* non-exclusive indicator = check box style indicator (see QActionGroup::setExclusive) */
/*
QMenu::indicator:non-exclusive:unchecked
{
    image: url(:icons/style/checkbox_unchecked.png);
}

QMenu::indicator:non-exclusive:unchecked:selected
{
    image: url(:icons/style/checkbox_unchecked_hover.png);
}

QMenu::indicator:non-exclusive:checked
{
    image: url(:icons/style/checkbox_checked.png);
}

QMenu::indicator:non-exclusive:checked:selected
{
    image: url(:icons/style/checkbox_checked_hover.png);
}
*/

/* exclusive indicator = radio button style indicator (see QActionGroup::setExclusive) */
/*
QMenu::indicator:exclusive:unchecked
{
    image: url(:icons/style/radiobutton_unchecked.png);
}

QMenu::indicator:exclusive:unchecked:selected
{
    image: url(:icons/style/radiobutton_unchecked_hover.png);
}

QMenu::indicator:exclusive:checked
{
    image: url(:icons/style/radiobutton_checked.png);
}

QMenu::indicator:exclusive:checked:selected
{
    image: url(:icons/style/radiobutton_checked_hover.png);
}
*/
/*  QCheckBox

Supports the box model. The check indicator can be styled using the ::indicator
subcontrol. By default, the indicator is placed in the Top Left corner of the
Contents rectangle of the widget.  The spacing property specifies the spacing
between the check indicator and the text. */

QCheckBox:enabled QLabel,
QCheckBox:enabled
{
    color: #FFFFFF
}

QCheckbox:!enabled QLabel,
QCheckBox:!enabled
{
    color: #000000;
}

QCheckBox::indicator:enabled
{
    background: url(:icons/style/checkbox-checked.png); 
}

QCheckBox
{
    spacing: 5px;
}

QCheckBox::indicator
{
    width: 13px;
    height: 13px;
}

QCheckBox::indicator:unchecked
{
    image: url(:icons/style/checkbox_unchecked.png);
}

QCheckBox::indicator:!enabled
{
    image: url(:icons/style/checkbox_disabled.png);
}

QCheckBox::indicator:checked:!enabled
{
    image: url(:icons/style/checkbox_checked_disabled.png);
}

QCheckBox::indicator:unchecked:hover
{
    image: url(:icons/style/checkbox_unchecked_hover.png);
}

QCheckBox::indicator:unchecked:pressed
{
    image: url(:icons/style/checkbox_unchecked_pressed.png);
}

QCheckBox::indicator:checked
{
    image: url(:icons/style/checkbox_checked.png);
}

QCheckBox::indicator:checked:hover
{
    image: url(:icons/style/checkbox_checked_hover.png);
}

QCheckBox::indicator:checked:pressed
{
    image: url(:icons/style/checkbox_checked_pressed.png);
}

QCheckBox::indicator:indeterminate
{
    image: url(:icons/style/checkbox_indeterminate.png);
}

QCheckBox::indicator:indeterminate:hover
{
    image: url(:icons/style/checkbox_indeterminate_hover.png);
}

QCheckBox::indicator:indeterminate:pressed
{
    image: url(:icons/style/checkbox_indeterminate_pressed.png);
}

/*  QRadioButton

Supports the box model. The check indicator can be styled using the ::indicator
subcontrol. By default, the indicator is placed in the Top Left corner of the
Contents rectangle of the widget.  The spacing property specifies the spacing
between the check indicator and the text. */

QRadioButton:enabled QLabel,
QRadioButton:enabled
{
    color: #FFFFFF;
}

QRadioButton:!enabled QLabel,
QRadioButton:!enabled
{
    color: #000000;
}

QRadioButton::indicator
{
    width: 13px;
    height: 13px;
}

QRadioButton::indicator::unchecked:enabled
{
    image: url(:icons/style/radiobutton_unchecked.png);
}

QRadioButton::indicator::unchecked:!enabled
{
    image: url(:icons/style/radiobutton_unchecked_disabled.png);
}

QRadioButton::indicator:unchecked:hover:enabled
{
    image: url(:icons/style/radiobutton_unchecked_hover.png);
}

QRadioButton::indicator:unchecked:hover:!enabled
{
    image: url(:icons/style/radiobutton_unchecked_hover_disabled.png);
}

QRadioButton::indicator:unchecked:pressed:enabled
{
    image: url(:icons/style/radiobutton_unchecked_pressed.png);
}

QRadioButton::indicator:unchecked:pressed:!enabled
{
    image: url(:icons/style/radiobutton_unchecked_pressed_disabled.png);
}

QRadioButton::indicator::checked:enabled
{
    image: url(:icons/style/radiobutton_checked.png);
}

QRadioButton::indicator::checked:!enabled
{
    image: url(:icons/style/radiobutton_checked_disabled.png);
}

QRadioButton::indicator:checked:hover:enabled
{
    image: url(:icons/style/radiobutton_checked_hover.png);
}

QRadioButton::indicator:checked:hover:!enabled
{
    image: url(:icons/style/radiobutton_checked_hover_disabled.png);
}

QRadioButton::indicator:checked:pressed:enabled
{
    image: url(:icons/style/radiobutton_checked_pressed.png);
}

QRadioButton::indicator:checked:pressed:!enabled
{
    image: url(:icons/style/radiobutton_checked_pressed_disabled.png);
}

/*  QMenuBar
  
Supports the box model. The spacing property specifies the spacing between menu
items. Individual items are styled using the ::item subcontrol. */

QMenuBar
{
    background-color: #404040;
}

QMenuBar::item
{
    spacing: 3px; /* spacing between menu bar items */
    padding: 1px 4px;
    background: transparent;
    color: #FFFFFF;
}

/* Selected item background
 */
QMenuBar::item:selected
{
    background-color: #80AFFF;
    color: #FFFFFF;
}

QMenuBar::item:pressed
{
/*    background: #EEEEEE;*/
    background-color: #BBCEFF;
}


/*  QMessageBox
  
The messagebox-text-interaction-flags property can be used to alter the
interaction with text in the message box. */

QMessageBox
{
    background: #000000;
}



/*  QProgressBar
  
Supports the box model. The chunks of the progress bar can be styled using the
::chunk subcontrol. The chunk is displayed on the Contents rectangle of the
widget.  If the progress bar displays text, use the text-align property to
position the text.  Indeterminate progress bars have the :indeterminate pseudo
state set. */

QProgressBar
{
    border: 1px solid #AAAAAA;
    border-radius: 3px;
    text-align: center;
    background: #FFFFFF;
}

QProgressBar::chunk
{
    background-color: #89B8E7;
    width: 20px;
}


/*  QSizeGrip

Supports the width, height, and image properties. */

QSizeGrip
{
}


/*  QSlider

Supports the box model. For horizontal slides, the min-width and height
properties must be provided. For vertical sliders, the min-height and width
properties must be provided.  The groove of the slider is styled using the
::groove. The groove is positioned by default in the Contents rectangle of the
widget. The thumb of the slider is styled using ::handle subcontrol. The
subcontrol moves in the Contents rectangle of the groove subcontrol. */

QSlider::horizontal
{
    border: 0px solid transparent;
    background: transparent;
    min-width: 50px;
    min-height: 5px;
}

QSlider::handle:horizontal
{
    background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #b4b4b4, stop:1 #8f8f8f);
    border: 1px solid #5c5c5c;
    width: 8px;
    height 8px;
    margin: -5px 0;
    border-radius: 3px;
}

QSlider::groove:horizontal
{
    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 #E0E0E0, stop:1 #EEEEEE);
    height: 5px;
    position: absolute;
    left: 4px;
    right: 4px;
}



/*  QSplitter

Supports the box model. The handle of the splitter is styled using the ::handle
subcontrol. */

/* these are the little vertical grab bars in file dialogs */

QSplitter
{
    background: #000000;
}


/*  QGroupBox

Supports the box model. The title can be styled using the ::title subcontrol.
By default, the title is placed depending on QGroupBox::textAlignment.  In the
case of a checkable QGroupBox, the title includes the check indicator. The
indicator is styled using the the ::indicator subcontrol. The spacing property
can be used to control the spacing between the text and indicator. */

QGroupBox
{
    background: #404040;
    color: #FFFFFF;
    border: 2px solid #BBBBBB;
    border-radius: 4px;
    padding: 2px;
    margin-top: 1ex;
}


QGroupBox::title
{
    color: #FFFFFF;
    subcontrol-origin: margin;
    subcontrol-position: top center;
    padding: 0 5px;
}

QGroupBox::title:!enabled
{
    color: #000000;
}

QGroupBox QWidget
{
    background: #404040;
}


/*  QToolButton
  
Supports the box model.  If the QToolButton has a menu, is ::menu-indicator
subcontrol can be used to style the indicator. By default, the menu-indicator is
positioned at the bottom right of the Padding rectangle of the widget.  If the
QToolButton is in QToolButton::MenuButtonPopup mode, the ::menu-button
subcontrol is used to draw the menu button. ::menu-arrow subcontrol is used to
draw the menu arrow inside the menu-button. By default, it is positioned in the
center of the Contents rectangle of the the menu-button subcontrol.  When the
QToolButton displays arrows, the ::up-arrow, ::down-arrow, ::left-arrow and
::right-arrow subcontrols are used.  Warning: If you only set a background-color
on a QToolButton, the background will not appear unless you set the border
property to some value. This is because, by default, the QToolButton draws a
native border which completely overlaps the background-color. For example,
QToolButton { background-color: red; border: none; } */

/* We use tool buttons for the TPB collapsing frame texts, eg. "Playback
 * parameters" and for toolbar buttons
 */

QToolButton[popupMode="1"]
{    /* only for MenuButtonPopup */
     padding-right: 5px; /* make way for the popup button */
}

QToolButton::menu-arrow
{
    image: url(:icons/style/arrow-down-small.png); 
}

QToolButton::menu-arrow:open
{
    top: 1px; left: 1px; /* shift it a bit */
}

QToolButton::menu-button
{
    background: transparent;
    border: none;
}

QToolButton::up-arrow
{ 
    image: url(:icons/style/arrow-up-small.png); 
}

QToolButton::down-arrow
{
    subcontrol-position: right bottom;
    image: url(:icons/style/arrow-down-small.png); 
}

QToolButton,
QToolButton::enabled
{
    color: #FFFFFF;
    background-color: transparent;
    border: 1px solid transparent;
    border-radius: 2px;
}

QToolButton::pressed,
QToolButton::checked
{
    border: 2px solid #AAAAAA;
    border-radius: 2px;
}

QToolButton::enabled:hover
{
    border: 2px solid #AAAAAA;
    border-radius: 2px;
    background-color: #666666;
}

QToolButton::!enabled
{
    color: #FFFFFF;
    background-color: transparent;
}

QToolButton::menu-indicator
{
    /* the arrow on tool buttons with menus in ImmediatePopup mode is
     * intentionally styled out of existence */
    background: transparent;
}

/*  QLineEdit

Supports the box model.  The color and background of the selected item is styled
using selection-color and selection-background-color respectively.  The password
character can be styled using the lineedit-password-character property. */

/* thanks be to Gaia this override actually works, for once!, and I dodged a
 * very nasty bullet here:
 */
QLineEdit, QFileDialog QLineEdit, QDialog QLineEdit
{
    border: 1px solid #AAAAAA;
    background-color: #FFFFFF;
    selection-background-color: #80AFFF;
    color: #000000;
    selection-color: #FFFFFF;
}


/*  QSpinBox
  
The frame of the spin box can be styled using the box model.  The up button and
arrow can be styled using the ::up-button and ::up-arrow subcontrols. By
default, the up-button is placed in the top right corner in the Padding
rectangle of the widget. Without an explicit size, it occupies half the height
of its reference rectangle. The up-arrow is placed in the center of the Contents
rectangle of the up-button.  The down button and arrow can be styled using the
::down-button and ::down-arrow subcontrols. By default, the down-button is
placed in the bottom right corner in the Padding rectangle of the widget.
Without an explicit size, it occupies half the height of its reference
rectangle. The bottom-arrow is placed in the center of the Contents rectangle of
the bottom-button. */

QSpinBox,
QDoubleSpinBox
{
    padding-right: 15px; /* make room for the arrows */
    /* we will use the stock demo frame image after all, since it was suitable,
     * and actually fixes background problems that would otherwise be annoying
     * to solve*/
    border-image: url(:icons/style/frame.png) 4;
    border-width: 3;
    color: #000000;
    selection-color: #FFFFFF;
    selection-background-color: #80AFFF;
}

QSpinBox::up-button,
QDoubleSpinBox::up-button
{
    subcontrol-origin: border;
    subcontrol-position: top right; /* position at the top right corner */

    width: 16px; /* 16 + 2*1px border-width = 15px padding + 3px parent border */
    border-image: url(:icons/style/spinup.png) 1;
    border-width: 1px;
}

QSpinBox::up-button:hover,
QDoubleSpinBox::up-button:hover
{
    border-image: url(:icons/style/spinup_hover.png) 1;
}

QSpinBox::up-button:pressed,
QDoubleSpinBox::up-button:pressed
{
    border-image: url(:icons/style/spinup_pressed.png) 1;
}

QSpinBox::up-arrow,
QDoubleSpinBox::up-arrow
{
    image: url(:icons/style/arrow-up-small.png);
    width: 7px;
    height: 7px;
}

QSpinBox::up-arrow:disabled,
QSpinBox::up-arrow:off,
QDoubleSpinBox::up-arrow:disabled,
QDoubleSpinBox::up-arrow:off
{  /* off state when value is max */
   image: url(:icons/style/arrow-up-small-inverted.png);
}

QSpinBox::down-button,
QDoubleSpinBox::down-button
{
    subcontrol-origin: border;
    subcontrol-position: bottom right; /* position at bottom right corner */

    width: 16px;
    border-image: url(:icons/style/spindown.png) 1;
    border-width: 1px;
    border-top-width: 0;
}

QSpinBox::down-button:hover,
QDoubleSpinBox::down-button:hover
{
    border-image: url(:icons/style/spindown_hover.png) 1;
}

QSpinBox::down-button:pressed,
QDoubleSpinBox::down-button:pressed
{
    border-image: url(:icons/style/spindown_pressed.png) 1;
}

QSpinBox::down-arrow,
QDoubleSpinBox::down-arrow
{
    image: url(:icons/style/arrow-down-small.png);
    width: 7px;
    height: 7px;
}

QSpinBox::down-arrow:disabled,
QSpinBox::down-arrow:off,
QDoubleSpinBox::down-arrow:disabled,
QDoubleSpinBox::down-arrow:off
{  /* off state when value in min */
   image: url(:icons/style/arrow-down-small-inverted.png);
}

/* QComboBox
The frame around the combobox can be styled using the box model. The drop-down button can be styled using the ::drop-down subcontrol. By default, the drop-down button is placed in the top right corner of the padding rectangle of the widget. The arrow mark inside the drop-down button can be styled using the ::down-arrow subcontrol. By default, the arrow is placed in the center of the contents rectangle of the drop-down subcontrol.

The pop-up of the QComboBox is a QAbstractItemView and is styled using the descendant selector.
*/

QComboBox {
    border: 1px solid #AAAAAA;
    border-radius: 3px;
    color: #FFFFFF;
}

QComboBox:enabled {
    color: #FFFFFF;
}

QComboBox:disabled {
    color: #909090;
}

QComboBox QAbstractItemView {
    background-color: #EEEEEE;
    border: 1px solid black;
    color: #000000;
}

QComboBox QAbstractItemView::separator
{
    height: 2px;
    background: #AAAAAA;
    margin-left: 10px;
    margin-right: 5px;
}

QComboBox QAbstractItemView::item:enabled
{
    /* sets background of menu item. set this to something non-transparent
    if you want menu color and menu item color to be different */
    background-color: transparent;
    color: #000000;
    padding: 2px 25px 2px 20px;
    border: 1px solid transparent;
    min-width: 12em; /* leaves room for space between item and hotkey */
}

QComboBox QAbstractItemView::item:!enabled
{
    color: #AAAAAA;
    padding: 2px 25px 2px 20px;
    border: 1px solid transparent;
    min-width: 12em; /* leaves room for space between item and hotkey */
}

/* Menu selection background color
 */
QComboBox QAbstractItemView::item:selected
{
    background-color: #80AFFF;
    color: #FFFFFF;
}


/* Hrm.  Has no effect at all.  Probably not worth much more bother, since Qt
 * automatically inverts the stock arrow pixmaps, and they're sort of legible,
 * but it might ultimately be worth subclassing QPlastiqueStyle in order to
 * specify different pixmaps, since this bit here doesn't seem to work.
 */
QFileDialog
{
    leftarrow-icon: url(:icons/style/arrow-left-inverted.png);
    rightarrow-icon: url(:icons/style/arrow-right-inverted.png);
    uparrow-icon: url(:icons/style/arrow-up-inverted.png);
}

QPushButton,
QFileDialog QPushButton,
QDialog QPushButton
{
    border: 2px solid #AAAAAA;
    border-radius: 2px;
    padding: 0.18em;
    padding-left: 0.5em;
    padding-right: 0.5em;
    margin: 0.3em;
}

QPushButton:disabled,
QFileDialog QPushButton:disabled,
QDialog QPushButton:disabled
{
    color: #AAAAAA;
}

QPushButton:pressed,
QFileDialog QPushButton:pressed,
QDialog QPushButton:pressed,
QFileDialog QPushButton:on,
QDialog QPushButton:on
{
    background-color: #BBCEFF;
}

QPushButton::enabled:hover
{
    background-color: #666666;
}
